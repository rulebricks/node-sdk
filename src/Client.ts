/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Rules } from "./api/resources/rules/client/Client";
import { Flows } from "./api/resources/flows/client/Client";
import { Decisions } from "./api/resources/decisions/client/Client";
import { Users } from "./api/resources/users/client/Client";
import { Assets } from "./api/resources/assets/client/Client";
import { Values } from "./api/resources/values/client/Client";
import { Tests } from "./api/resources/tests/client/Client";

export declare namespace RulebricksClient {
    export interface Options {
        environment?: core.Supplier<environments.RulebricksEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class RulebricksClient {
    protected _rules: Rules | undefined;
    protected _flows: Flows | undefined;
    protected _decisions: Decisions | undefined;
    protected _users: Users | undefined;
    protected _assets: Assets | undefined;
    protected _values: Values | undefined;
    protected _tests: Tests | undefined;

    constructor(protected readonly _options: RulebricksClient.Options) {}

    public get rules(): Rules {
        return (this._rules ??= new Rules(this._options));
    }

    public get flows(): Flows {
        return (this._flows ??= new Flows(this._options));
    }

    public get decisions(): Decisions {
        return (this._decisions ??= new Decisions(this._options));
    }

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }

    public get assets(): Assets {
        return (this._assets ??= new Assets(this._options));
    }

    public get values(): Values {
        return (this._values ??= new Values(this._options));
    }

    public get tests(): Tests {
        return (this._tests ??= new Tests(this._options));
    }
}
