/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Tests {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Administrative operations for programmatically managing test suites for rules and flows
 */
export class Tests {
    constructor(protected readonly _options: Tests.Options) {}

    /**
     * Retrieves a list of tests associated with the rule identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.listRuleTests("slug")
     */
    public async listRuleTests(
        slug: string,
        requestOptions?: Tests.RequestOptions,
    ): Promise<RulebricksApi.TestListResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/v1/admin/rules/${encodeURIComponent(slug)}/tests`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TestListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new RulebricksApi.NotFoundError(_response.error.body);
                case 500:
                    throw new RulebricksApi.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/admin/rules/{slug}/tests.",
                );
            case "unknown":
                throw new errors.RulebricksApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds a new test to the test suite of a rule identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {RulebricksApi.CreateTestRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.createRuleTest("slug", {
     *         name: "Test 3",
     *         request: {
     *             "param1": "value1"
     *         },
     *         response: {
     *             "status": "success"
     *         },
     *         critical: true
     *     })
     */
    public async createRuleTest(
        slug: string,
        request: RulebricksApi.CreateTestRequest,
        requestOptions?: Tests.RequestOptions,
    ): Promise<RulebricksApi.Test> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/v1/admin/rules/${encodeURIComponent(slug)}/tests`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateTestRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Test.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new RulebricksApi.BadRequestError(_response.error.body);
                case 404:
                    throw new RulebricksApi.NotFoundError(_response.error.body);
                case 500:
                    throw new RulebricksApi.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksApiTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/admin/rules/{slug}/tests.",
                );
            case "unknown":
                throw new errors.RulebricksApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes a test from the test suite of a rule identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {string} testId - The ID of the test.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.deleteRuleTest("slug", "testId")
     */
    public async deleteRuleTest(
        slug: string,
        testId: string,
        requestOptions?: Tests.RequestOptions,
    ): Promise<RulebricksApi.Test> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/v1/admin/rules/${encodeURIComponent(slug)}/tests/${encodeURIComponent(testId)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Test.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new RulebricksApi.NotFoundError(_response.error.body);
                case 500:
                    throw new RulebricksApi.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksApiTimeoutError(
                    "Timeout exceeded when calling DELETE /api/v1/admin/rules/{slug}/tests/{testId}.",
                );
            case "unknown":
                throw new errors.RulebricksApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves a list of tests associated with the flow identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.listFlowTests("slug")
     */
    public async listFlowTests(
        slug: string,
        requestOptions?: Tests.RequestOptions,
    ): Promise<RulebricksApi.TestListResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/v1/admin/flows/${encodeURIComponent(slug)}/tests`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TestListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new RulebricksApi.NotFoundError(_response.error.body);
                case 500:
                    throw new RulebricksApi.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/admin/flows/{slug}/tests.",
                );
            case "unknown":
                throw new errors.RulebricksApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds a new test to the test suite of a flow identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {RulebricksApi.CreateTestRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.createFlowTest("slug", {
     *         name: "Test 3",
     *         request: {
     *             "param1": "value1"
     *         },
     *         response: {
     *             "status": "success"
     *         },
     *         critical: true
     *     })
     */
    public async createFlowTest(
        slug: string,
        request: RulebricksApi.CreateTestRequest,
        requestOptions?: Tests.RequestOptions,
    ): Promise<RulebricksApi.Test> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/v1/admin/flows/${encodeURIComponent(slug)}/tests`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateTestRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Test.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new RulebricksApi.BadRequestError(_response.error.body);
                case 404:
                    throw new RulebricksApi.NotFoundError(_response.error.body);
                case 500:
                    throw new RulebricksApi.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksApiTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/admin/flows/{slug}/tests.",
                );
            case "unknown":
                throw new errors.RulebricksApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes a test from the test suite of a flow identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {string} testId - The ID of the test.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.deleteFlowTest("slug", "testId")
     */
    public async deleteFlowTest(
        slug: string,
        testId: string,
        requestOptions?: Tests.RequestOptions,
    ): Promise<RulebricksApi.Test> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/v1/admin/flows/${encodeURIComponent(slug)}/tests/${encodeURIComponent(testId)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Test.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new RulebricksApi.NotFoundError(_response.error.body);
                case 500:
                    throw new RulebricksApi.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksApiTimeoutError(
                    "Timeout exceeded when calling DELETE /api/v1/admin/flows/{slug}/tests/{testId}.",
                );
            case "unknown":
                throw new errors.RulebricksApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
