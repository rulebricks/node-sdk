/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
export declare namespace Tests {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Administrative operations for programmatically managing test suites for rules and flows
 */
export declare class Tests {
    protected readonly _options: Tests.Options;
    constructor(_options: Tests.Options);
    /**
     * Retrieves a list of tests associated with the rule identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.listRuleTests("slug")
     */
    listRuleTests(slug: string, requestOptions?: Tests.RequestOptions): Promise<RulebricksApi.TestListResponse>;
    /**
     * Adds a new test to the test suite of a rule identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {RulebricksApi.CreateTestRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.createRuleTest("slug", {
     *         name: "Test 3",
     *         request: {
     *             "param1": "value1"
     *         },
     *         response: {
     *             "status": "success"
     *         },
     *         critical: true
     *     })
     */
    createRuleTest(slug: string, request: RulebricksApi.CreateTestRequest, requestOptions?: Tests.RequestOptions): Promise<RulebricksApi.Test>;
    /**
     * Deletes a test from the test suite of a rule identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {string} testId - The ID of the test.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.deleteRuleTest("slug", "testId")
     */
    deleteRuleTest(slug: string, testId: string, requestOptions?: Tests.RequestOptions): Promise<RulebricksApi.Test>;
    /**
     * Retrieves a list of tests associated with the flow identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.listFlowTests("slug")
     */
    listFlowTests(slug: string, requestOptions?: Tests.RequestOptions): Promise<RulebricksApi.TestListResponse>;
    /**
     * Adds a new test to the test suite of a flow identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {RulebricksApi.CreateTestRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.createFlowTest("slug", {
     *         name: "Test 3",
     *         request: {
     *             "param1": "value1"
     *         },
     *         response: {
     *             "status": "success"
     *         },
     *         critical: true
     *     })
     */
    createFlowTest(slug: string, request: RulebricksApi.CreateTestRequest, requestOptions?: Tests.RequestOptions): Promise<RulebricksApi.Test>;
    /**
     * Deletes a test from the test suite of a flow identified by the slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {string} testId - The ID of the test.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.tests.deleteFlowTest("slug", "testId")
     */
    deleteFlowTest(slug: string, testId: string, requestOptions?: Tests.RequestOptions): Promise<RulebricksApi.Test>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
