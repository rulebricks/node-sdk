/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rulebricks from "../../../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";

export declare namespace Groups {
    export interface Options {
        environment?: core.Supplier<environments.RulebricksEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Groups {
    constructor(protected readonly _options: Groups.Options) {}

    /**
     * List all user groups available in your Rulebricks organization.
     *
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rulebricks.InternalServerError}
     *
     * @example
     *     await client.users.groups.list()
     */
    public async list(requestOptions?: Groups.RequestOptions): Promise<Rulebricks.UserGroupListResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.RulebricksEnvironment.Default,
                "admin/users/groups",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.UserGroupListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rulebricks.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksTimeoutError("Timeout exceeded when calling GET /admin/users/groups.");
            case "unknown":
                throw new errors.RulebricksError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a new user group in your Rulebricks organization.
     *
     * @param {Rulebricks.users.CreateUserGroupRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rulebricks.BadRequestError}
     * @throws {@link Rulebricks.InternalServerError}
     *
     * @example
     *     await client.users.groups.create({
     *         name: "NewGroup",
     *         description: "Description of the new group."
     *     })
     */
    public async create(
        request: Rulebricks.users.CreateUserGroupRequest,
        requestOptions?: Groups.RequestOptions,
    ): Promise<Rulebricks.UserGroup> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.RulebricksEnvironment.Default,
                "admin/users/groups",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.users.CreateUserGroupRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.UserGroup.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Rulebricks.BadRequestError(_response.error.body);
                case 500:
                    throw new Rulebricks.InternalServerError(_response.error.body);
                default:
                    throw new errors.RulebricksError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RulebricksError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RulebricksTimeoutError("Timeout exceeded when calling POST /admin/users/groups.");
            case "unknown":
                throw new errors.RulebricksError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
