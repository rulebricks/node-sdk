/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../..";
export declare namespace Users {
    interface Options {
        environment: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Operations for managing users on your team and their permissions
 */
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * Invite a new user to the organization or update groupspermissions for an existing user.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.users.invite({
     *         email: "newuser@example.com",
     *         role: RulebricksApi.InviteRequestRole.Developer,
     *         accessGroups: ["group1", "group2"]
     *     })
     *
     * @example
     *     await rulebricksApi.users.invite({
     *         email: "existinguser@example.com",
     *         role: RulebricksApi.InviteRequestRole.Editor,
     *         accessGroups: ["group1"]
     *     })
     *
     * @example
     *     await rulebricksApi.users.invite({
     *         email: "newuser@example.com",
     *         role: RulebricksApi.InviteRequestRole.Developer,
     *         accessGroups: ["group1", "group2"]
     *     })
     *
     * @example
     *     await rulebricksApi.users.invite({
     *         email: "newuser@example.com",
     *         role: RulebricksApi.InviteRequestRole.Developer,
     *         accessGroups: ["group1", "group2"]
     *     })
     */
    invite(request: RulebricksApi.InviteRequest, requestOptions?: Users.RequestOptions): Promise<RulebricksApi.InviteResponse>;
    /**
     * List all user groups available in your Rulebricks organization.
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.users.listGroups()
     */
    listGroups(requestOptions?: Users.RequestOptions): Promise<RulebricksApi.ListGroupsResponseItem[]>;
    /**
     * Create a new user group in your Rulebricks organization.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.users.createGroup({
     *         name: "NewGroup",
     *         description: "Description of the new group."
     *     })
     */
    createGroup(request: RulebricksApi.CreateGroupRequest, requestOptions?: Users.RequestOptions): Promise<RulebricksApi.CreateGroupResponse>;
}
