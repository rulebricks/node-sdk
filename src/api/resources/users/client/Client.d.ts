/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
export declare namespace Users {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Operations for managing users on your team and their permissions
 */
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * Invite a new user to the organization or update role or access group data for an existing user.
     *
     * @param {RulebricksApi.UserInviteRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.users.inviteUser({
     *         email: "newuser@example.com",
     *         role: "developer",
     *         accessGroups: ["group1", "group2"]
     *     })
     *
     * @example
     *     await client.users.inviteUser({
     *         email: "existinguser@example.com",
     *         role: "custom-role",
     *         accessGroups: ["group1"]
     *     })
     */
    inviteUser(request: RulebricksApi.UserInviteRequest, requestOptions?: Users.RequestOptions): Promise<RulebricksApi.UserInviteResponse>;
    /**
     * List all user groups available in your Rulebricks organization.
     *
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.users.listGroups()
     */
    listGroups(requestOptions?: Users.RequestOptions): Promise<RulebricksApi.UserGroupListResponse>;
    /**
     * Create a new user group in your Rulebricks organization.
     *
     * @param {RulebricksApi.CreateUserGroupRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.users.createGroup({
     *         name: "NewGroup",
     *         description: "Description of the new group."
     *     })
     */
    createGroup(request: RulebricksApi.CreateUserGroupRequest, requestOptions?: Users.RequestOptions): Promise<RulebricksApi.UserGroup>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
