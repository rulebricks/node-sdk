/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
export declare namespace Assets {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Administrative operations for managing rules, flows, folders, and usage
 */
export declare class Assets {
    protected readonly _options: Assets.Options;
    constructor(_options: Assets.Options);
    /**
     * Delete a specific rule by its ID.
     *
     * @param {RulebricksApi.DeleteRuleRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.deleteRule({
     *         id: "id"
     *     })
     */
    deleteRule(request: RulebricksApi.DeleteRuleRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.SuccessMessage>;
    /**
     * Export a specific rule by its ID.
     *
     * @param {RulebricksApi.ExportRuleRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.exportRule({
     *         id: "id"
     *     })
     */
    exportRule(request: RulebricksApi.ExportRuleRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.RuleExport>;
    /**
     * Import a rule into the user's account.
     *
     * @param {RulebricksApi.ImportRuleRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.ForbiddenError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.importRule({
     *         rule: {
     *             "key": "value"
     *         }
     *     })
     */
    importRule(request: RulebricksApi.ImportRuleRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.RuleExport>;
    /**
     * List all rules in the organization. Optionally filter by folder name or ID.
     *
     * @param {RulebricksApi.ListRulesRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.listRules()
     */
    listRules(request?: RulebricksApi.ListRulesRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.RuleListResponse>;
    /**
     * List all flows in the organization.
     *
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.listFlows()
     */
    listFlows(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.FlowListResponse>;
    /**
     * Get the rule execution usage of your organization.
     *
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.assets.getUsage()
     */
    getUsage(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.UsageStatistics>;
    /**
     * Retrieve all rule folders for the authenticated user.
     *
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.listFolders()
     */
    listFolders(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.FolderListResponse>;
    /**
     * Create a new rule folder or update an existing one for the authenticated user.
     *
     * @param {RulebricksApi.UpsertFolderRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.upsertFolder({
     *         name: "Marketing Rules",
     *         description: "Rules for marketing automation workflows"
     *     })
     */
    upsertFolder(request: RulebricksApi.UpsertFolderRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.Folder>;
    /**
     * Delete a specific rule folder for the authenticated user. This does not delete the rules within the folder.
     *
     * @param {RulebricksApi.DeleteFolderRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.assets.deleteFolder({
     *         id: "abc123"
     *     })
     */
    deleteFolder(request: RulebricksApi.DeleteFolderRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.Folder>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
