/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../..";
export declare namespace Assets {
    interface Options {
        environment: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Administrative operations for managing rules/flows, and monitoring usage
 */
export declare class Assets {
    protected readonly _options: Assets.Options;
    constructor(_options: Assets.Options);
    /**
     * Delete a specific rule by its ID.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.deleteRule({})
     */
    deleteRule(request?: RulebricksApi.DeleteRuleRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.DeleteRuleResponse>;
    /**
     * Export a specific rule by its ID.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.exportRule({
     *         id: "id"
     *     })
     */
    exportRule(request: RulebricksApi.ExportRuleRequest, requestOptions?: Assets.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * Import a rule into the user's account.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.ForbiddenError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.importRule({
     *         id: "id",
     *         createdAt: new Date("2024-01-15T09:30:00.000Z"),
     *         slug: "slug",
     *         updatedAt: new Date("2024-01-15T09:30:00.000Z"),
     *         testRequest: {
     *             "key": "value"
     *         },
     *         name: "name",
     *         description: "description",
     *         requestSchema: [],
     *         responseSchema: [],
     *         sampleRequest: {
     *             "key": "value"
     *         },
     *         sampleResponse: {
     *             "key": "value"
     *         },
     *         conditions: [],
     *         published: true,
     *         history: []
     *     })
     */
    importRule(request: RulebricksApi.ImportRuleRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.ImportRuleResponse>;
    /**
     * List all flows in the organization.
     *
     * @example
     *     await rulebricksApi.assets.list()
     */
    list(requestOptions?: Assets.RequestOptions): Promise<void>;
    /**
     * Get the rule execution usage of your organization.
     *
     * @example
     *     await rulebricksApi.assets.usage()
     */
    usage(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.UsageResponse>;
}
