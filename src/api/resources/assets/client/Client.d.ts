/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../..";
export declare namespace Assets {
    interface Options {
        environment: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Administrative operations for managing rules, flows, folders, and usage
 */
export declare class Assets {
    protected readonly _options: Assets.Options;
    constructor(_options: Assets.Options);
    /**
     * Delete a specific rule by its ID.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.deleteRule({})
     */
    deleteRule(request?: RulebricksApi.DeleteRuleRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.DeleteRuleResponse>;
    /**
     * Export a specific rule by its ID.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.exportRule({
     *         id: "id"
     *     })
     */
    exportRule(request: RulebricksApi.ExportRuleRequest, requestOptions?: Assets.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * Import a rule into the user's account.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.ForbiddenError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.importRule({
     *         rule: {
     *             "key": "value"
     *         }
     *     })
     */
    importRule(request: RulebricksApi.ImportRuleRequest, requestOptions?: Assets.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * List all rules in the organization. Optionally filter by folder name or ID.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.listRules({})
     */
    listRules(request?: RulebricksApi.ListRulesRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.ListRulesResponseItem[]>;
    /**
     * List all flows in the organization.
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.listFlows()
     */
    listFlows(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.ListFlowsResponseItem[]>;
    /**
     * Get the rule execution usage of your organization.
     *
     * @example
     *     await rulebricksApi.assets.usage()
     */
    usage(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.UsageResponse>;
    /**
     * Retrieve all rule folders for the authenticated user.
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.listFolders()
     */
    listFolders(requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.ListFoldersResponseItem[]>;
    /**
     * Create a new rule folder or update an existing one for the authenticated user.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.upsertFolder({
     *         name: "Marketing Rules",
     *         description: "Rules for marketing automation workflows"
     *     })
     */
    upsertFolder(request: RulebricksApi.UpsertFolderRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.UpsertFolderResponse>;
    /**
     * Delete a specific rule folder for the authenticated user. This does not delete the rules within the folder.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.assets.deleteFolder({
     *         id: "abc123"
     *     })
     */
    deleteFolder(request: RulebricksApi.DeleteFolderRequest, requestOptions?: Assets.RequestOptions): Promise<RulebricksApi.DeleteFolderResponse>;
}
