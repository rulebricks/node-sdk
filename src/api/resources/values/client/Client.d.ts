/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
export declare namespace Values {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Operations for managing dynamic values referenced in rules
 */
export declare class Values {
    protected readonly _options: Values.Options;
    constructor(_options: Values.Options);
    /**
     * Retrieve all dynamic values for the authenticated user.
     *
     * @param {RulebricksApi.ListDynamicValuesRequest} request
     * @param {Values.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.values.listDynamicValues()
     */
    listDynamicValues(request?: RulebricksApi.ListDynamicValuesRequest, requestOptions?: Values.RequestOptions): Promise<RulebricksApi.DynamicValueListResponse>;
    /**
     * Update existing dynamic values or add new ones for the authenticated user.
     *
     * @param {RulebricksApi.UpdateValuesRequest} request
     * @param {Values.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.values.updateValues({
     *         values: {
     *             "Favorite Color": "blue",
     *             "Age": 30,
     *             "Is Student": false,
     *             "Hobbies": ["reading", "cycling"]
     *         },
     *         accessGroups: ["marketing", "developers"]
     *     })
     */
    updateValues(request: RulebricksApi.UpdateValuesRequest, requestOptions?: Values.RequestOptions): Promise<RulebricksApi.DynamicValueListResponse>;
    /**
     * Delete a specific dynamic value for the authenticated user by its ID.
     *
     * @param {RulebricksApi.DeleteDynamicValueRequest} request
     * @param {Values.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.NotFoundError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.values.deleteDynamicValue({
     *         id: "id"
     *     })
     */
    deleteDynamicValue(request: RulebricksApi.DeleteDynamicValueRequest, requestOptions?: Values.RequestOptions): Promise<RulebricksApi.SuccessMessage>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
