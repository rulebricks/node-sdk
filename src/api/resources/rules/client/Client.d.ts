/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../..";
export declare namespace Rules {
    interface Options {
        environment: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Rules {
    protected readonly _options: Rules.Options;
    constructor(_options: Rules.Options);
    /**
     * Executes a single rule identified by a unique slug. The request and response formats are dynamic, dependent on the rule configuration.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.rules.solve("slug", {
     *         "name": "John Doe",
     *         "age": 30,
     *         "email": "jdoe@acme.co"
     *     })
     */
    solve(slug: string, request: Record<string, unknown>, requestOptions?: Rules.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * Executes a particular rule against multiple request data payloads provided in a list.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.rules.bulkSolve("slug", [{
     *             "name": "John Doe",
     *             "age": 30,
     *             "email": "jdoe@acme.co"
     *         }, {
     *             "name": "Jane Doe",
     *             "age": 28,
     *             "email": "jane@example.com"
     *         }])
     */
    bulkSolve(slug: string, request: Record<string, unknown>[], requestOptions?: Rules.RequestOptions): Promise<Record<string, unknown>[]>;
    /**
     * Executes multiple rules in parallel based on a provided mapping of rule slugs to payloads.
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await rulebricksApi.rules.parallelSolve({
     *         "eligibility": {
     *             "rule": "1ef03ms",
     *             "name": "John Doe",
     *             "age": 30,
     *             "email": "jdoe@acme.co"
     *         },
     *         "offers": {
     *             "rule": "OvmsYwn",
     *             "customer_id": "12345",
     *             "last_purchase_days_ago": 30,
     *             "selected_plan": "premium"
     *         }
     *     })
     */
    parallelSolve(request: Record<string, unknown>, requestOptions?: Rules.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * List all rules in the organization.
     *
     * @example
     *     await rulebricksApi.rules.list()
     */
    list(requestOptions?: Rules.RequestOptions): Promise<RulebricksApi.ListResponseItem[]>;
    /**
     * Get the rule execution usage of your organization.
     *
     * @example
     *     await rulebricksApi.rules.usage()
     */
    usage(requestOptions?: Rules.RequestOptions): Promise<RulebricksApi.UsageResponse>;
}
