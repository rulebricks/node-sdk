/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
export declare namespace Decisions {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Query highly detailed logs of prior rule executions within the last 15 days
 */
export declare class Decisions {
    protected readonly _options: Decisions.Options;
    constructor(_options: Decisions.Options);
    /**
     * Retrieve logs for a specific user and rule, with optional date range and pagination.
     *
     * @param {RulebricksApi.QueryDecisionsRequest} request
     * @param {Decisions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.decisions.queryDecisions({
     *         slug: "slug"
     *     })
     */
    queryDecisions(request: RulebricksApi.QueryDecisionsRequest, requestOptions?: Decisions.RequestOptions): Promise<RulebricksApi.DecisionLogResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
