/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as RulebricksApi from "../../../index";
export declare namespace Flows {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Operations for executing flows, which are sequences of rules and external actions
 */
export declare class Flows {
    protected readonly _options: Flows.Options;
    constructor(_options: Flows.Options);
    /**
     * Execute a flow by its slug.
     *
     * @param {string} slug - The unique identifier for the resource.
     * @param {RulebricksApi.DynamicRequestPayload} request
     * @param {Flows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link RulebricksApi.BadRequestError}
     * @throws {@link RulebricksApi.InternalServerError}
     *
     * @example
     *     await client.flows.executeFlow("slug", {
     *         "name": "John Doe",
     *         "age": 30,
     *         "email": "jdoe@acme.co"
     *     })
     */
    executeFlow(slug: string, request: RulebricksApi.DynamicRequestPayload, requestOptions?: Flows.RequestOptions): Promise<RulebricksApi.DynamicResponsePayload>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
